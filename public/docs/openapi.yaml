openapi: 3.0.3
info:
  title: The SideProjectAPI (Express) Documentation
  description: ''
  version: 1.0.0
servers:
  - url: 'http://localhost:3000'
paths:
  '/api/healthcheck/:unnecessaryParam':
    get:
      summary: Healthcheck
      description: >-
        Check that the service is up. If everything is okay, you'll get a 200 OK
        response.


        Otherwise, the request will fail with a 400 error, and a response
        listing the failed services.
      parameters:
        - in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        - in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: up
                  services:
                    database: up
                    redis: up
                properties: {}
        '400':
          description: '400, Service is unhealthy'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: down
                  services:
                    database: up
                    redis: down
                properties: {}
      tags: []
      security: []
  /nested:
    post:
      summary: Nested fields
      description: ''
      parameters:
        - in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        - in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {}
      tags: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: The data
                  example:
                    name: non
                    size: 5
                    things:
                      - ex
                      - reprehenderit
                    objects:
                      - a: vel
                        b: perspiciatis
                      - b: perspiciatis
                        a: vel
                  properties:
                    name:
                      type: string
                      description: A string field.
                      example: non
                    size:
                      type: integer
                      description: A number.
                      example: 5
                    things:
                      type: array
                      description: An array of strings
                      example:
                        - ex
                        - reprehenderit
                      items:
                        type: string
                    objects:
                      type: array
                      description: An array of objects
                      example:
                        - a: vel
                          b: perspiciatis
                        - b: perspiciatis
                          a: vel
                      items:
                        type: object
                        properties:
                          a:
                            type: string
                            description: A field in the array of objects
                            example: vel
                          b:
                            type: string
                            description: A field in the array of objects
                            example: perspiciatis
              required:
                - data
        required: true
      security: []
  /array-body:
    post:
      summary: Body content array
      description: ''
      parameters:
        - in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        - in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {}
      tags: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: List of items
              example:
                - row_id: '700'
                  name: My item name
                - name: My item name
                  row_id: '700'
              items:
                type: object
                properties:
                  row_id:
                    type: string
                    description: A unique ID.
                    example: '700'
                  name:
                    type: string
                    description: An element name.
                    example: My item name
                required:
                  - name
        required: true
      security: []
  /file-input:
    post:
      summary: File input
      description: ''
      parameters:
        - in: header
          name: Content-Type
          description: ''
          example: multipart/form-data
          schema:
            type: string
        - in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {}
      tags: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                the_file:
                  type: string
                  format: binary
                  description: Just a file.
                nested:
                  type: object
                  description: ''
                  example:
                    _string: est
                    _file:
                      ___filePath: >-
                        C:\Users\shalvah\AppData\Local\Temp\tmp-10620-PdiZ3e24etma
                  properties:
                    _string:
                      type: string
                      description: A nested string.
                      example: est
                    _file:
                      type: string
                      format: binary
                      description: A nested file.
              required:
                - the_file
                - nested
        required: true
      security: []
  /sideProjects:
    get:
      summary: View all side projects
      description: >
        This endpoint's response was gotten via a "response call"â€”

        Scribe **called our API** in a test environment to get a sample
        response.
      parameters:
        - in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        - in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  - id: 1
                    name: Product Group Developer
                    description: Ea ea earum aspernatur recusandae eum ut et.
                    url: null
                    dueAt: '2021-06-19T07:02:53.289Z'
                    createdAt: '2021-06-18T16:35:57.575Z'
                    updatedAt: '2021-06-18T16:35:57.575Z'
                    UserId: 1
      tags: []
      security: []
  '/sideProjects/:id':
    post:
      summary: Update a side project
      description: ''
      parameters:
        - in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        - in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {}
      tags: []
      security: []
    get:
      summary: View a side project
      description: >-
        The 404 sample is gotten from a "response file".


        <aside class="success">Also, pretty cool: this endpoint's (and some
        others) URL parameters were figured out entirely by Scribe!</aside>
      parameters:
        - in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        - in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  name: Product Group Developer
                  description: Ea ea earum aspernatur recusandae eum ut et.
                  url: null
                  dueAt: '2021-06-19T07:02:53.289Z'
                  createdAt: '2021-06-18T16:35:57.575Z'
                  updatedAt: '2021-06-18T16:35:57.575Z'
                  UserId: 1
                  User:
                    id: 1
                    name: Jessie Medhurst
                    email: Johnathan_Purdy36@gmail.com
                    emailVerifiedAt: '2021-06-18T16:35:57.558Z'
                    password: >-
                      $2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi
                    createdAt: '2021-06-18T16:35:57.560Z'
                    updatedAt: '2021-06-18T16:35:57.560Z'
                properties: {}
        '404':
          description: '404, Side project not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Not found
                  resource: Side project
                properties: {}
      tags: []
      security: []
    delete:
      summary: Delete a side project
      description: ''
      parameters:
        - in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        - in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        '204':
          description: '204, Nothing to see here'
      tags: []
      security: []
  /users:
    get:
      summary: View all users
      description: >-
        [TODO] This endpoint uses a custom Scribe strategy that parses a

        `@usesPagination` annotation to add some query parameters.


        The sample response is gotten by Scribe making a test API call (aka
        "response call").
      parameters:
        - in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        - in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    - id: 1
                      name: Jessie Medhurst
                      email: Johnathan_Purdy36@gmail.com
                      emailVerifiedAt: '2021-06-18T16:35:57.558Z'
                      password: >-
                        $2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi
                      createdAt: '2021-06-18T16:35:57.560Z'
                      updatedAt: '2021-06-18T16:35:57.560Z'
                properties: {}
      tags: []
      security: []
    post:
      summary: Create a user
      description: ''
      parameters:
        - in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        - in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {}
      tags: []
      security: []
  '/users/:id':
    get:
      summary: Fetch a user
      description: The 404 sample is gotten from a "response file".
      parameters:
        - in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        - in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  dara:
                    id: 1
                    name: Jessie Medhurst
                    email: Johnathan_Purdy36@gmail.com
                    emailVerifiedAt: '2021-06-18T16:35:57.558Z'
                    password: >-
                      $2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi
                    createdAt: '2021-06-18T16:35:57.560Z'
                    updatedAt: '2021-06-18T16:35:57.560Z'
                    SideProjects:
                      - id: 1
                        name: Product Group Developer
                        description: Ea ea earum aspernatur recusandae eum ut et.
                        url: null
                        dueAt: '2021-06-19T07:02:53.289Z'
                        createdAt: '2021-06-18T16:35:57.575Z'
                        updatedAt: '2021-06-18T16:35:57.575Z'
                        UserId: 1
                properties: {}
        '404':
          description: '404, User not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Not found
                  resource: user
                properties: {}
      tags: []
      security: []
  '/users/:id/auth':
    post:
      summary: Authenticate
      description: "Get a new API token.\n\n<aside>Yes, we know you can impersonate any user.\U0001F644</aside>"
      parameters:
        - in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        - in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        '200':
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  token: 2|KLDoUXc68Ko0JaFDZoX9qYkUqWglwdGxQsvTGBCg
                properties: {}
      tags: []
      security: []
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  - default: []
